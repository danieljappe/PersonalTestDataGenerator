name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_FLAGS: '--prefer-dist --no-progress --no-interaction'

jobs:
  # Job 1: Backend Unit and Integration Tests
  backend-tests:
    name: Backend Tests (PHP)
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:10.6.20
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: addresses
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json
          coverage: xdebug
          tools: composer:v2

      - name: 📋 Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend

      - name: 💾 Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 📦 Install dependencies
        run: composer install ${{ env.COMPOSER_FLAGS }}
        working-directory: backend

      - name: 🗄️ Load test database
        run: |
          mysql -h 127.0.0.1 -u root -ppassword < backend/db/addresses.sql
          
      - name: ⏳ Wait for database to be ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u root -ppassword -e "SELECT 1" > /dev/null 2>&1; then
              echo "Database is ready"
              break
            fi
            echo "Waiting for database... ($i/30)"
            sleep 2
          done

      - name: 🧪 Run Unit Tests
        run: vendor/bin/phpunit tests/Unit --testdox
        working-directory: backend

      - name: 🔗 Run Integration Tests
        run: vendor/bin/phpunit tests/Integration/ApiSimplifiedTest.php --testdox
        working-directory: backend

      - name: 📊 Generate test coverage
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-html
        working-directory: backend
        continue-on-error: true

      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage-html
        if: always()

  # Job 2: API Tests with Postman/Newman
  api-tests:
    name: API Tests (Postman)
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      mariadb:
        image: mariadb:10.6.20
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: addresses
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json

      - name: 🗄️ Load database
        run: |
          mysql -h 127.0.0.1 -u root -ppassword < backend/db/addresses.sql
          
      - name: ⏳ Wait for database to be ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u root -ppassword -e "SELECT 1" > /dev/null 2>&1; then
              echo "Database is ready"
              break
            fi
            echo "Waiting for database... ($i/30)"
            sleep 2
          done

      - name: 📦 Install backend dependencies
        run: composer install --no-dev ${{ env.COMPOSER_FLAGS }}
        working-directory: backend

      - name: 🌐 Start PHP built-in server
        run: |
          cd backend
          DB_HOST=127.0.0.1 DB_PORT=3306 DB_NAME=addresses DB_USER=root DB_PASSWORD=password php -S localhost:8081 &
          sleep 5

      - name: 🧪 Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: 🚀 Run Postman tests
        run: |
          newman run postman/PersonalTestDataGenerator.postman_collection.json \
            --env-var "BACKEND_URL=http://localhost:8081/php_fake_info" \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export postman-report.html

      - name: 📤 Upload Postman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: postman-report
          path: postman-report.html

  # Job 3: End-to-End Tests with Cypress
  e2e-tests:
    name: E2E Tests (Cypress)
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      mariadb:
        image: mariadb:10.6.20
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: addresses
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🗄️ Load database
        run: |
          mysql -h 127.0.0.1 -u root -ppassword < backend/db/addresses.sql
          
      - name: ⏳ Wait for database to be ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u root -ppassword -e "SELECT 1" > /dev/null 2>&1; then
              echo "Database is ready"
              break
            fi
            echo "Waiting for database... ($i/30)"
            sleep 2
          done

      - name: 📦 Install backend dependencies
        run: composer install --no-dev ${{ env.COMPOSER_FLAGS }}
        working-directory: backend

      - name: 🌐 Start backend server
        run: |
          cd backend
          DB_HOST=127.0.0.1 DB_PORT=3306 DB_NAME=addresses DB_USER=root DB_PASSWORD=password php -S localhost:8081 &
          sleep 5

      - name: 📦 Install frontend dependencies
        run: npm install
        working-directory: frontend

      - name: 🌐 Start frontend server
        run: |
          cd frontend
          npx http-server -p 8080 &
          sleep 5

      - name: 🧪 Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          browser: chrome
          headed: false
          config: baseUrl=http://localhost:8080
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: 📤 Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

      - name: 📤 Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos

  # Job 4: SonarCloud Analysis
  sonarcloud:
    name: Code Quality (SonarCloud)
    runs-on: ubuntu-latest
    needs: [backend-tests, api-tests, e2e-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: xdebug

      - name: 📦 Install PHP dependencies
        run: composer install ${{ env.COMPOSER_FLAGS }}
        working-directory: backend

      - name: 📊 Generate coverage for SonarCloud
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
        working-directory: backend
        continue-on-error: true

      - name: 🔍 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 5: Static Analysis (Optional)
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: phpcs, phpstan, psalm

      - name: 📦 Install dependencies
        run: composer install ${{ env.COMPOSER_FLAGS }}
        working-directory: backend

      - name: 🔍 Run PHP CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 src/ tests/
        working-directory: backend
        continue-on-error: true

      - name: 🔍 Run PHPStan
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse src/ --level=5
        working-directory: backend
        continue-on-error: true

  # Final Job: Report Summary
  report:
    name: Test Report Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, api-tests, e2e-tests, sonarcloud, static-analysis]
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate summary
        run: |
          echo "## 📋 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ✅ |" >> $GITHUB_STEP_SUMMARY
